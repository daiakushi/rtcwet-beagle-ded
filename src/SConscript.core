# -*- mode: python -*-
# Enemy Territory build script
# TTimo <ttimo@idsoftware.com>
# http://scons.sourceforge.net

import sys, os
import scons_utils

Import( 'GLOBALS' )
Import( GLOBALS )

server_string = """
sv_bot.c
sv_ccmds.c
sv_client.c
sv_game.c
sv_init.c
sv_main.c
sv_net_chan.c
sv_snapshot.c
sv_world.c"""

server_list = scons_utils.BuildList( 'server', server_string )

qcommon_string = """
cm_load.c
cm_patch.c
cm_polylib.c
cm_test.c
cm_trace.c
cmd.c
common.c
cvar.c
files.c
huffman.c
md4.c
msg.c
net_chan.c
unzip.c
vm.c
vm_interpreted.c"""

qcommon_list = scons_utils.BuildList( 'qcommon', qcommon_string )

splines_string = """
math_angles.cpp
math_matrix.cpp
math_quaternion.cpp
math_vector.cpp
q_parse.cpp
q_shared.c
splines.cpp
util_str.cpp"""


splines_list = scons_utils.BuildList( 'splines', splines_string )

linux_sources = [
        'unix/linux_signals.c',
        'unix/unix_main.c',
        'unix/unix_net.c',
        'unix/unix_shared.c',
		'unix/snapvector.c',
        'game/q_shared.c',
        'game/q_math.c',
#        'unix/matha.S'
]

linux_full_sources = [
        'unix/linux_glimp.c',
        'unix/linux_qgl.c',
        'unix/linux_snd.c',
        'unix/linux_joystick.c',
#        'unix/snd_mixa.S'
]

botlib_list = [
	'be_aas_bspq3.c',
	'be_aas_cluster.c',
	'be_aas_debug.c',
	'be_aas_entity.c',
	'be_aas_file.c',
	'be_aas_main.c',
	'be_aas_move.c',
	'be_aas_optimize.c',
	'be_aas_reach.c',
	'be_aas_route.c',
	'be_aas_routealt.c',
	'be_aas_routetable.c',
	'be_aas_sample.c',
	'be_ai_char.c',
	'be_ai_chat.c',
	'be_ai_gen.c',
	'be_ai_goal.c',
	'be_ai_move.c',
	'be_ai_weap.c',
	'be_ai_weight.c',
	'be_ea.c',
	'be_interface.c',
	'l_crc.c',
	'l_libvar.c',
	'l_log.c',
	'l_memory.c',
	'l_precomp.c',
	'l_script.c',
	'l_struct.c'
]

botlib_env = g_env.Clone()
botlib_env.Append( CPPDEFINES = [ 'BOTLIB' ] )

botlib_objs = []
for i in botlib_list:
	botlib_objs.append( botlib_env.StaticObject( os.path.join( 'botlib', i ) ) )

splines_env = g_env.Clone()
splines_lib = splines_env.StaticLibrary( splines_list )

local_env = g_env.Clone()

local_env.Append( LIBS = [ 'dl' ] )
local_env.Append( CPPDEFINES = [ 'DEDICATED' ] )
local_env.Append( LIBS = [ 'm' ] )

if gcc3 == 0:
	g_env.Append(LINKFLAGS=[ os.popen( g_env['CXX'] + ' -print-file-name=libstdc++.a' ).read().rstrip() ])
else:
	local_env['ENV']['CC'] = g_env['CC']
	local_env['LINK'] = 'unix/staticlinkcpp.sh'

if ( MASTER != '' ):
	local_env.Append( CPPDEFINES = [ 'MASTER_SERVER_NAME=\\"%s\\"' % MASTER ] )

source_list = server_list + qcommon_list + linux_sources + botlib_objs + splines_lib
source_list += [ 'null/null_client.c', 'null/null_input.c', 'null/null_snddma.c', 'qcommon/dl_main_stubs.c' ]

ret = local_env.Program( target = 'et', source = source_list )
Return( 'ret' )
